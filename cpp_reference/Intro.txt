C++ is a genral purpose programming language:
---------------------------------------------
a programming language offers two related tasks: 
1- it provides a vehicle for the programmer to specify actions to be executed by the machine, 
	requires a language that is ‘‘close to the machine’’ so that all important aspects of a machine 
	are handled simply and efficiently
2- and it provides a set of concepts for the programmer to use when thinking about what can be done. 
	the language should be that is ‘‘close to the problem to be solved’’

c++ offers both. evoluted from simula. The result supports a synthesis of programming styles that can 
be simultaneously efficient and elegant.

C++ is described to be bias to system programming:
--------------------------------------------------
By systems programming I mean writing code that directly uses hardware resources, has serious
resource constraints, or closely interacts with code that does. In particular, the implementation of
software infrastructure (e.g., device drivers, communications stacks, virtual machines, operating
systems, operations systems, programming environments, and foundation libraries) is mostly systems 
programming.

programming styles supported by c++
-----------------------------------
The C++ language features most directly support four programming styles:
• Procedural programming
• Data abstraction
• Object-oriented programming
• Generic programming

a combination of these styles can be used. 

Procedural programming: 
-----------------------
This is programming focused on processing and the design of suitable data structures. It is what C 
was designed to support (and Algol, and Fortran, as well as many other languages). C++’s support comes 
in the form of the built-in types, operators, statements, functions, structs, unions, etc. With 
minor exceptions, C is a subset of C++. Compared to C, C++ provides further support for procedural 
programming in the form of many additional language constructs and a stricter, more flexible, and 
more supportiv e type system.

Data abstraction: 
-----------------
This is programming focused on the design of interfaces, hiding implementation details in general 
and representations in particular. C++ supports concrete and abstract classes. The facilities for 
defining classes with private implementation details, constructors and destructors, and associated
operations directly support this. The notion of an abstract class provides direct support for complete 
data hiding.

Object-oriented programming: 
----------------------------
This is programming focused on the design, implementation, and use of class hierarchies. In addition 
to allowing the definition lattices of classes, C++ provides a variety of features for navigating class 
lattices and for simplifying the definition of a class out of existing ones. Class hierarchies provide 
run-time polymorphism (§20.3.2, §21.2) and encapsulation (§20.4, §20.5).

Generic programming: 
--------------------
This is programming focused on the design, implementation, and use of general algorithms. Here, ‘‘general’’ 
means that an algorithm can be designed to accept a wide variety of types as long as they meet the algorithm’s 
requirements on its arguments. rt for generic programming. Templates provide (compiletime) parametric 
polymorphism.

using c++ 
---------
[1] Represent ideas directly in code.
[2] Represent relationships among ideas directly in code (e.g., hierarchical, parametric, and
ownership relationships).
[3] Represent independent ideas independently in code.
[4] Keep simple things simple (without making complex things impossible).
[5] Prefer statically type-checked solutions (when applicable).
[6] Keep information local (e.g., avoid global variables, minimize the use of pointers).
[7] Don’t overabstract (i.e., don’t generalize, introduce class hierarchies, or parameterize
beyond obvious needs and experience).

