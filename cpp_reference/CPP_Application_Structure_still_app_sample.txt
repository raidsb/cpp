Example: stil utilities toolset  

Using Eclipse to import the project already exists: 
---------------------------------------------------
1. Open eclipse
2. From file menu -> import
3. In the dialogue box select c/c++ dropdownlist and select Existing Code as Makefile project.
4. In the new dialogue box
5. In project Name add a name for the project
6. Existing Code location -> add the path to the location of the project
7. Select Linux GCC if the project is in Linux
8. Finish 
9. You should see the project imported in the "Project Explorer" left pane

 
The high structure of the tool (the stil utilities toolset is a set of tools not one application) 
-------------------------------------------------------------------------------------------------
Under the main project folder(the folder that you imported in Eclipse) 
----------------------------------------------------------------------
Main_folder
	1. Includes (this includes all of the system includes like compiler and system library) 
	2. apps (list of final applications which will be used directly through a cmdline) 
		1. Application1 "TestColCheck" 
			a. application1_main.cpp 
			b. application1.cpp 
			c. application1.h 
			d. CMakeLists.txt 
		2. Application2
		3. Application3 
		4. … 
		5. CMakeLists.txt (the cmake file for this directory)
	3. build (This folder will have all built bin applications) 
		1. cmake.Debug (the main cmake file which will call all other cmake files in the project. This one is made for Debug) 
		2. cmake.Release (this cmake file is made for released bin) 
		3. README 
	4. docs (documentation folder?) - This is the docuentation folder, in the msim it includes the release notes but not used now.
		1. CmakeLists.txt 
	5. include (includes header files only organized per application or as needed) 
		1. Lib1 header files 
			1. Subfolder 1 for lib1  
			2. Subfolder 2 for lib1 
		2. Lib2 header files 
		3. Lib3 header files (can be for external lib also) 
		4. version.h  
	6. src (folder contains implementation code for headers) 
		1. Module1 implementation code  
		2. Module2 (can be the parser) implementation code 
		3. CMakeLists.txt 
	7. tests 
		1. Application1 (tests for application1 name this folder as the application's name) 
			1. Test1 
				2. CMakeLists.txt 
				3. Required files for the test if needed. 
			2. Test2  
			3. Test3  
			4. CMakeLists.txt 
		2. Application2 (tests for application2) 
		3. CMakeLists.txt 
	8. CMakeLists.txt (what is this for) 
	9. README.md (this by convention the readme file top in the github) 

The project to do: 
The DSL (Domain Specific Language) from scratch. 